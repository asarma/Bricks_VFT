define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var dom = require("../lib/dom");
var lang = require("../lib/lang");
var EventEmitter = require("../lib/event_emitter").EventEmitter;

var Cells = function(parentEl) {
    this.element = dom.createElement("div");
    this.element.className = "ace_tree_layer ace_tree_cell-layer";
    parentEl.appendChild(this.element);
};

(function() {

    oop.implement(this, EventEmitter);

    this.setDataProvider = function(provider) {
        this.provider = provider;
        this.update = provider.renderRow ? this.$customUpdate : this.$treeModeUpdate;
    };
    
    this.update = function (config) {
    };
    
    this.measureSizes = function() {
        var domNode = this.element.firstChild;
        if (domNode) {
            this.provider.rowHeight = domNode.offsetHeight;
            this.provider.rowHeightInner = domNode.clientHeight;
        }
    };
    
    this.$treeModeUpdate = function (config) {
        this.config = config;
        
        var provider = this.provider;
        var row, html = [], view = config.view, datarow;
        var firstRow = config.firstRow, lastRow = config.lastRow + 1;
        var hsize = "auto;", vsize = provider.rowHeightInner || provider.rowHeight;
        
        for (row = firstRow; row < lastRow; row++) {
            datarow = view[row - firstRow];
            this.$renderRow(html, datarow, vsize, hsize, row);
        }
        
        if (firstRow === 0 && lastRow === 0) {
            this.renderPlaceHolder(provider, html, config);
        }
        
        this.element = dom.setInnerHtml(this.element, html.join(""));
        
        if (!vsize) {
            this.measureSizes();
        }
    };
    
    this.columnNode = function(datarow, column, vSize) {
        return "<span class='tree-column " 
        + (column.className || "")
        + "' style='"
        + (datarow.fullWidth ? "" : "width:" + column.$width + ";")
        + "height:" + (vSize || "") + "'>";
    };
    
    this.$renderRow = function(html, datarow, vsize, hsize, row) {
        var provider = this.provider;
        var columns = provider.columns;
        var indent = provider.$indentSize;// provider.getIndent(datarow);
        html.push("<div style='height:" + vsize + "px;"
            + (columns ? "padding-right:" + columns.$fixedWidth : "")
            + "' class='tree-row "
            + (provider.isSelected(datarow) ? "selected ": '')  
            + (provider.getClassName(datarow) || "") + (row & 1 ? " odd" : " even")
            + (datarow.name ? "' title='" + datarow.name : "") + "'>");
        
        if (!columns || columns[0].type == "tree") {
            if (columns) {
                html.push(this.columnNode(datarow, columns[0], row));
            }
            html.push(
                (datarow.$depth ? "<span style='width:" + datarow.$depth * indent + "px' class='tree-indent'></span>" : "" )
                + "<span class='toggler " + (provider.hasChildren(datarow)
                    ? (provider.isOpen(datarow) ? "open" : "closed")
                    : "empty")
                + "'></span>"
                + provider.getIconHTML(datarow)
                + ( provider.getContentHTML ? provider.getContentHTML(datarow)
                    : "<span class='caption' style='width: " + hsize + "px;height: " + vsize + "px'>"
                    +   provider.getCaptionHTML(datarow)
                    + "</span>"
                )
            );
        }
        if (columns) {
            for (var col = columns[0].type == "tree" ? 1 : 0; col < columns.length; col++) {
                html.push("</span>" 
                    + this.columnNode(datarow, columns[col], row)
                    + columns[col].getText(datarow));
            }
            html.push("</span>");
        }
        
        html.push("</div>");
    };
    
    this.$customUpdate = function(config) {
        this.config = config;
        
        var provider = this.provider;
        var html = [];
        var firstRow = config.firstRow, lastRow = config.lastRow + 1;

        for (var row = firstRow; row < lastRow; row++) {
           provider.renderRow(row, html, config);
        }
        
        if (firstRow === 0 && lastRow === 0) {
            this.renderPlaceHolder(provider, html, config);
        }
        
        this.element = dom.setInnerHtml(this.element, html.join(""));
    };
    
    this.updateClasses = function(config) {
        // fallback to full redraw for customUpdate
        if (this.update == this.$customUpdate && !this.provider.updateNode)
            return this.update(config);
            
        this.config = config;
        
        var provider = this.provider;
        var row, view = config.view, datarow;
        var firstRow = config.firstRow, lastRow = config.lastRow + 1;
        var children = this.element.children;
        
        if (children.length != lastRow - firstRow)
            return this.update(config);
        
        for (row = firstRow; row < lastRow; row++) {
            datarow = view[row - firstRow];
            var el = children[row - firstRow];
            if (provider.redrawNode) {
                provider.redrawNode(el, datarow);
            } else {
                el.className = "tree-row "
                    + (provider.isSelected(datarow) ? "selected ": "")
                    + (provider.getClassName(datarow) || "");
            }
        }
    };

    this.scroll = function(config) {
        // not implemented
        return this.update(config);
        
        this.element.insertAdjacentHTML("afterBegin", "<span>a</span><s>r</s>");
        this.element.insertAdjacentHTML("beforeEnd", "<span>a</span><s>r</s>");
    };
    
    this.updateRows = function(config, firstRow, lastRow) {
        // not implemented
    };

    this.destroy = function() {
        
    };
    
    this.getDomNodeAtIndex = function(i) {
        return this.element.children[i - this.config.firstRow];
    };
    
    this.renderPlaceHolder = function(provider, html, config) {
        if (provider.renderEmptyMessage) {
            provider.renderEmptyMessage(html, config);
        } else if (provider.getEmptyMessage) {
            html.push(
                "<div class='message empty'>",
                    provider.getEmptyMessage(),
                "</div>"
            );
        }
    };

}).call(Cells.prototype);

exports.Cells = Cells;

});
