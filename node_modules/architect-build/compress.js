var UglifyJS = require("uglify-js");


function compress(sources, opts){
    var toplevel = null;
    if (!sources.length) {
        return {
            code : "",
            map  : null
        };
    }
    
    sources.forEach(function(pkg){
        console.log("Adding '" + pkg.file + "'.");
        
        toplevel = UglifyJS.parse(pkg.source, {
            filename: pkg.file.replace(new RegExp("^" + opts.basepath + "/"), ""), //@todo remove prefix
            toplevel: toplevel
        });
    });
    
    /**
     * UglifyJS contains a scope analyzer that you need to call manually before 
     * compressing or mangling. Basically it augments various nodes in the AST 
     * with information about where is a name defined, how many times is a name 
     * referenced, if it is a global or not, if a function is using eval or the 
     * with statement etc. I will discuss this some place else, for now what's 
     * important to know is that you need to call the following before doing 
     * anything with the tree:
     */
    toplevel.figure_out_scope();
    
    var compressor = UglifyJS.Compressor({
        evaluate: false
    });
    var compressed_ast = toplevel.transform(compressor);
    
    /**
     * After compression it is a good idea to call again figure_out_scope 
     * (since the compressor might drop unused variables / unreachable code and 
     * this might change the number of identifiers or their position). 
     * Optionally, you can call a trick that helps after Gzip (counting 
     * character frequency in non-mangleable words). 
     */
    compressed_ast.figure_out_scope();
    compressed_ast.compute_char_frequency();
    //compressed_ast.mangle_names({except: ["$", "require", "exports"]});
    
    var stream;
    if (opts.mapFile) {
        // Generate a source map
        var source_map = UglifyJS.SourceMap({
            file : opts.mapFile || "build.js.map",
            root : opts.mapRoot
        });
        stream = UglifyJS.OutputStream({
            source_map: source_map
        });
    }
    else {
        stream = UglifyJS.OutputStream();
    }
    compressed_ast.print(stream);
    
    return {
        code : stream.toString(),
        map  : source_map ? source_map.toString() : null // json output for your source map
    };
}

module.exports = compress;
