define(function(require, exports, module) {
    
"use strict";

var ReliableSocket = require("./reliable_socket");
var ReconnectSocket = require("./reconnect_socket");

/**
 * Creates a reliable socket with automatic reconnects
 */
var connectClient = module.exports = function(connectEio, options) {
    var reconnectSocket = new ReconnectSocket();
    options = options || {};
    options.seq = options.seq || 20000;
    
    var connectionId;
    
    var socket = new ReliableSocket(reconnectSocket, options);
    socket.on("disconnect", function() {
        connectionId = null;
    });
    
    var connectAttempts = 0;
    var preConnectCheck = options.preConnectCheck || function(cb) { cb(null, true); };
    
    function connect() {
        if (reconnectSocket.readyState !== "away") {
            // Lets double check that the socket isn't in the process of going away
            setTimeout(function(){
                if (connectAttempts === 0 && reconnectSocket.readyState === "away")
                    connect();
            }, 250);
            return;
        }
            
        preConnectCheck(function(err, shouldConnect) {
            if (err || !shouldConnect)
                return reconnect();
                
            reconnectSocket.setSocket(null);
            
            var eioSocket = connectEio();
            eioSocket.on("open", function() {
                eioSocket.send(JSON.stringify({
                    type: "handshake",
                    session: connectionId,
                    seq: socket.seq
                }));
            });
            
            eioSocket.on("message", function handshakeReply(msg) {
                try {
                    msg = JSON.parse(msg);
                } catch (e) {}
                
                if (msg.type !== "handshake reply" || !msg.seq) {
                    socket.close();
                    return reconnect(); // Make sure we never end up in a disconnected state
                }
    
                // backend has changed!
                if (connectionId && connectionId !== msg.session) {
                    socket.disconnect();
                }
                
                connectionId = msg.session;
                
                eioSocket.off("message", handshakeReply);
                connectAttempts = 0;
                
                if (socket.recId == -1)
                    socket.recId = msg.seq;
                    
                reconnectSocket.setSocket(eioSocket);
            });
            
            eioSocket.on("error", reconnect);
            eioSocket.on("close", reconnect);
        });
    }
    
    
    function reconnect() {
        reconnectSocket.setSocket(null);
        connectAttempts += 1;
        
        var delay = 250;
        if (connectAttempts > 10) {
            delay = 10 * 1000;
        }
        else if (connectAttempts > 5) {
            delay = 5 * 1000;
        }
        else if (connectAttempts > 3) {
            delay = 1 * 1000;
        }

        console.log("Schedule re-connect in: " + delay);
        setTimeout(function() {
            connect();
        }, delay);
    }
    
    socket.connect = connect;
    socket.reconnect = reconnect;
    return socket;
};

});