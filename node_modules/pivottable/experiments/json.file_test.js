/*global describe it before */

var isBrowser = true;
if (typeof module !== "undefined") {
    var isBrowser = false;
    require("amd-loader");
}

define(function(require, exports, module) {
    "use strict";

    var expect = (isBrowser ? require("../node_modules/chai/chai") : global["require"]("chai")).expect;
    var DataProvider  = isBrowser ? require("./json.file") : global["require"]("experiments/json.file");
    
    describe("DataProvider (json.file)", function(){
        var provider, expected = [], data;
        before(function(done){
            provider = new DataProvider();
            provider.loadFromUrl("summary.json", function(){
                done();
            });
        });
        
        describe("entities", function(){
            it('should contain all entity names', function(done) {
                expect(provider.entities).deep.equal([
                    {"name": "id", "length": 400},
                    {"name": "product", "length": 3},
                    {"name": "city", "length": 4},
                    {"name": "state", "length": 5},
                    {"name": "quantity", "length": 391},
                    {"name": "value", "length": 50},
                    {"name": "month", "length": 12},
                    {"name": "quarter", "length": 4},
                    {"name": "year", "length": 2},
                    {"name": "person", "length": 3}
                ]);
                done();
            });
        });
        describe("getEntityRange()", function(){
            it('should return a sorted list of strings of the values of one entity', function(done) {
                provider.getEntityRange("product", 0, null, function(err, list){
                    expect(list).deep.equal(["Chair", "Ladder", "Spanner"]);
                });
                provider.getEntityRange("person", 0, null, function(err, list){
                    expect(list).deep.equal(["Ed Spencer", "Molham Aref", "Ruben Daniels"]);
                });
                provider.getEntityRange("person", 1, 2, function(err, list){
                    expect(list).deep.equal(["Molham Aref", "Ruben Daniels"]);
                    done();
                });
            });
            it('should return a sorted list of ints of the values of one entity', function(done) {
                provider.getEntityRange("year", 0, null, function(err, list){
                    expect(list).deep.equal(["2009", "2010"]);
                });
                provider.getEntityRange("month", 3, 6, function(err, list){
                    expect(list).deep.equal(["4", "5", "6", "7", "8", "9"]);
                    done();
                });
            });
        });
        describe("setQuery()", function(){
            it('should set a query that determines the view', function(done) {
                provider.setQuery(
                    ["city", "year"],
                    ["month", "product", "person"], 
                    {kind: "sum", entity: "value"},
                    function(){
                        expect(provider.view).length(108);
                        expect(provider.view[0][1]).equal(4);
                        
                        done();
                    });
            });
        });
        describe("getDataRange()", function(){
            it('should get a viewport on the data', function(done) {
                provider.getDataRange(
                    {start: 40, length: 60},
                    {start: 0, length: 20},
                    function(err, view){
                        debugger;
                        done();
                    }
                );
            });
        });
    });
    
    (typeof onload == "function") && onload();
});

// if (typeof module !== "undefined" && module === require.main) {
//     mocha.run();
// }