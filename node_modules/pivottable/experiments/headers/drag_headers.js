define(function(require, exports, module) {
"use strict";

var dom = require("pivot/lib/dom");
var event = require("pivot/lib/event");

var DragHeaders = function(axis, el, headers) {
    this.axis = axis;
    this.el = el;
    this.headers = headers;

    this.init();
    this.redraw();
};

(function() {

    this.init = function() {
        dom.addCssClass(this.el, "axis_" + this.axis);
        dom.addCssClass(this.el, "droppable");
        
        this.el.onDrop = this.onDrop.bind(this);
        this.el.onDropOver = this.onDropOver.bind(this);
        this.el.onDropOut = this.onDropOut.bind(this);
        
        event.addListener(this.el, "mouseover", this.onMouseOver.bind(this));  
        event.addListener(this.el, "mouseout", this.onMouseOut.bind(this));  
        event.addListener(this.el, "mousedown", this.onMouseDown.bind(this));  
        
        this.headers.on("change", this.redraw.bind(this));
    };

    this.onDrop = function(e) {
        // if (e.sender === this)
        //     return;
            
        this.headers.moveHeader(e.data, this.axis);
    };
    this.onDropOver = function(e) {
        // if (e.sender === this)
        //     return;
    
        dom.addCssClass(this.el, "dropover");
    };
    
    this.onDropOut = function(e) {
        // if (e.sender === this)
        //     return;
            
        dom.removeCssClass(this.el, "dropover");        
    };

    this.onMouseOver = function(e) {
        var target = e.target;
        if (!dom.hasCssClass(target, "header"))
            return;
            
        dom.addCssClass(e.target, "hover");
    };
    
    this.onMouseOut = function(e) {
        var target = e.target;
        if (!dom.hasCssClass(target, "header"))
            return;
            
        dom.removeCssClass(e.target, "hover");
    };
    
    this.onMouseDown = function(e) {
        var that = this;
        
        var el = e.target;
        if (!dom.hasCssClass(el, "header"))
            return;
        
        var headerName = decodeURIComponent(el.id.slice("header_".length));
        
        var elPos = el.getBoundingClientRect();
        var dragOffset = {
            x: e.pageX,
            y: e.pageY
        };
        
        var draggable = el.cloneNode(true);
        dom.addCssClass(draggable, "draggable");
        dom.removeCssClass(draggable, "hover");
        
        var style = draggable.style;
        style.left = elPos.left + "px";
        style.top = elPos.top + "px";
        style.height = elPos.height + "px";
        style.width = elPos.width + "px";

        document.body.appendChild(draggable);
        
        el.style.visibility = "hidden";
        
        var oldTarget = null;
        
        function newEvent(type) {
            return {
                type: type,
                data: headerName,
                sender: that
            };
        }
        
        event.capture(el, function(e) {
            style.left = (elPos.left + (e.pageX - dragOffset.x)) + "px";
            style.top = (elPos.top + (e.pageY - dragOffset.y)) + "px";
           
            var droppable = that.findDroppable(e.target);
            if (oldTarget && droppable != oldTarget && oldTarget.onDropOut) {
                oldTarget.onDropOut(newEvent("dropout"));
            }
            
            if (droppable && droppable != oldTarget && droppable.onDropOver) {
                droppable.onDropOver(newEvent("dropover"));
            }
            
            oldTarget = droppable;
            event.stopEvent(e);
        }, function() {
            if (oldTarget && oldTarget.onDropOut) {
                oldTarget.onDropOut(newEvent("dropout"));
            }
            if (oldTarget && oldTarget.onDrop) {
                oldTarget.onDrop(newEvent("drop"));
            }            
            
            el.style.visibility = "visible";
           document.body.removeChild(draggable);
        });
    };
    
    this.findDroppable = function(el) {
        while (el) {
            if (dom.hasCssClass(el, "droppable"))
                return el;
                
            el = el.praentElement;
        }    
    };

    this.redraw = function() {
        var that = this;
    
        var headers = this.headers.axis[this.axis];
        this.el.innerHTML = "";
        
        headers.forEach(function(header) {
            var el = document.createElement("span");
            dom.setInnerText(el, header.name);
            el.className = "header";
            el.id = "header_" + encodeURIComponent(header.name);
            
            that.el.appendChild(el);
        });
    };

}).call(DragHeaders.prototype);

exports.DragHeaders = DragHeaders;

});