define(function(require, exports, module) {

var net     = require("pivot/lib/net");
var emitter = require("pivot/lib/event_emitter").EventEmitter;

function DataProvider(){
    var e = emitter; //@todo this should be an object instantiation
    
    this.on   = e.on.bind(e);
    this.once = e.once.bind(e);
    this.off  = e.off.bind(e);
    this.emit = e._emit.bind(e);
    
    this.ready = false;
    
    this.totals = {};
}
DataProvider.prototype = {
    loadFromObject : function(json){
        this.data = json;
        
        var entities = {};
        for (var n, i = 0, l = json.length; i < l; i++) {
            n = json[i];
            for (var prop in n) {
                ((entities[prop] || (entities[prop] = {}))[n[prop]] 
                    || (entities[prop][n[prop]] = [])).push(n);
            }
        }

        var lut = [];
        var data, sort = function(a, b){ return a - b; };
        for (var name in entities) {
            data = entities[name]._values = Object.keys(entities[name]);
            
            lut.push(lut[name] = {
                name   : name,
                length : data.length
            });
            
            if (parseFloat(data[0]) == data[0])
                data.sort(sort);
            else
                data.sort();
        }
        
        this.entities  = lut;
        this._entities = entities;
        
        this.ready = true;
        this.emit("ready");
    },
    
    /**
     * Loads a json object from a url
     * @param url
     * @param callback
     */
    loadFromUrl : function(url, callback){
        var _self = this;
        
        net.get(url, function(data){
            var json;
            
            try { json = JSON.parse(data); } 
            catch(e) { callback(e); }
            
            if (!(json instanceof Array))
                json = json.rows;
            
            _self.loadFromObject(json);
            
            callback();
        });
    },
    
    /**
     * 
     */
    getEntityRange : function(name, start, length, callback){
        var data  = this._entities[name]._values;
        var cache = data.slice(start, length ? start + length : undefined);
        
        var diff = (start + length) - data.length;
        if (this.totals[name] && (!length || diff >= 0)) 
            cache.push("Total")
        if (diff > 0)
            cache = cache.concat(data.slice(0, diff));
        
        callback(null, cache, false);
        
        return cache;
    },
    
    enableTotals : function(){
        for (var i = 0; i < arguments.length; i++) {
            this.totals[arguments[i]] = true;
        }
    },
    
    disableTotals : function(){
        for (var i = 0; i < arguments.length; i++) {
            this.totals[arguments[i]] = false;
        }
    },
    
    /**
     * 
     */
    setQuery : function(x, y, aggregate, callback){
        if (x) this.x = x;
        if (y) this.y = y;
        
        var totals = this.totals;
        
        function expand(fields, totalsAfter){
            var headings = this._entities[fields[0]]._values.map(function(n){
                return [n];
            });
            
            for (var i = 1; i < fields.length; i++) {
                var values = this._entities[fields[i]]._values;
                var base   = headings.splice(0);
                for (var j = 0; j < values.length; j++) {
                    if (totals[values[j]] && !totalsAfter) {
                        var item = new Array(i); 
                        item.push("totals");
                        headings.push(item);
                    }
                    
                    for (var n, k = 0; k < base.length; k++) {
                        n = base[k].slice(0);
                        n.push(values[j]);
                        headings.push(n);
                    }
                    
                    if (totals[values[j]] && totalsAfter) {
                        var item = new Array(i); 
                        item.push("totals");
                        headings.push(item);
                    }
                }
            }
            
            return headings;
        }
        
        function findValue(x, xv, y, yv) {
            var remaining = this._entities[x[0]][xv[0]];
            if (!remaining.length) return;
            
            var i, j;
            
            remaining = remaining.slice(0);
            for (i = 1; i < x.length; i++) {
                for (j = remaining.length - 1; j >= 0; j--) {
                    if (remaining[j][x[i]] != xv[i]) {
                        remaining.splice(j, 1);
                        if (!remaining.length) return;
                    }
                }
            }
            for (i = 0; i < y.length; i++) {
                for (j = remaining.length - 1; j >= 0; j--) {
                    if (remaining[j][y[i]] != yv[i]) {
                        remaining.splice(j, 1);
                        if (!remaining.length) return;
                    }
                }
            }
            
            var value;
            if (aggregate.kind == "sum") {
                value = 0;
                for (i = 0; i < remaining.length; i++) {
                    value += remaining[i][aggregate.entity];
                }
            }
            else if (aggregate.kind == "avg") {
                value = 0;
                for (i = 0; i < remaining.length; i++) {
                    value += remaining[i][aggregate.entity];
                }
                value = value / remaining.length;
            }
            
            return value;
        }
        
        function findTotals(j, i){
            var k, z, index, sub, total, count, start;
            
            if (!columns[j][0]) {
                index = columns[j].indexOf("totals"), sub = 1, total = 0;
                for (k = 0; k < index - 1; k++) {
                    sub *= this.entities[x[k]].length + (k === 0 ? 0 : 1);
                }
                count = this.entities[x[index - 1]].length;
                start = j - (sub * count);
                for (z = j - 1; z >= start; z -= sub)
                    total += (view[i][z] || 0);
            }
            else if (!rows[i][0]) {
                index = rows[i].indexOf("totals"), sub = 1, total = 0;
                for (k = 0; k < index - 1; k++) {
                    sub *= this.entities[y[k]].length + (k === 0 ? 0 : 1);
                }
                count = this.entities[y[index - 1]].length;
                start = i - (sub * count);
                for (z = i - 1; z >= start; z -= sub)
                    total += (view[z][j] || 0);
            }
            return total;
        }
        
        // Flatten columns
        var columns = expand.call(this, this.x, true);
        
        // Flatten rows
        var rows = expand.call(this, this.y, true);
        
        // Build 2D Array
        var row, view = [];
        for (var j, jl, i = 0, l = rows.length; i < l; i++) {
            view.push(row = []);
            for (j = 0, jl = columns.length; j < jl; j++) {
                row[j] = totals && (!columns[j][0] || !rows[i][0])
                    ? findTotals.call(this, j, i)
                    : findValue.call(this, x, columns[j], y, rows[i]);
            }
        }
        
        this.rows         = rows.length;
        this.columns      = columns.length;
        this.headingRange = true;
        
        this.view = view;
        
        var _self = this;
        
        // Vertical Headings
        // this.vHeadings = [];
        // for (var i = 0; i < this.x.length; i++){ this.vHeadings[i] = []; }
        // function getInt(){ return Math.round(Math.random()*10)+1};
        // function getName(name){ 
        //     var list = _self._entities[name]._values;
        //     return list[Math.max(0, Math.round(Math.random() * list.length - 0.01))];
        // }
        // var count = [], names = [];
        // for (var i = 0; i < this.rows; i++) {
        //     for (var j = 0; j < this.x.length; j++) {
        //         if (!count[j]) {
        //             count[j] = getInt();
        //             names[j] = getName(this.x[j]);
        //         }
        //         if (count[j]) {
        //             this.vHeadings[j].push(names[j])
        //             count[j]--;
        //         }
        //     }
        // }
        
        // // Horizontal Headings
        // this.hHeadings = [];
        // for (var i = 0; i < this.y.length; i++){ this.hHeadings[i] = []; }
        // function getInt(){ return Math.round(Math.random()*10)+1};
        // function getName(name){ 
        //     var list = _self._entities[name]._values;
        //     return list[Math.max(0, Math.round(Math.random() * list.length - 0.01))];
        // }
        // var count = [], names = [];
        // for (var i = 0; i < this.columns; i++) {
        //     for (var j = 0; j < this.y.length; j++) {
        //         if (!count[j]) {
        //             count[j] = getInt();
        //             names[j] = getName(this.y[j]);
        //         }
        //         if (count[j]) {
        //             this.hHeadings[j].push(names[j])
        //             count[j]--;
        //         }
        //     }
        // }
        
        this.vHeadings = [
            ["Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","Molham","*",
             "Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","Ruben","*",
             "Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","Zef","*"],
            [
             "January","January","January","January","January","January","January","January","January","January","January","January","*",
             "Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","*","*",
             "January","January","January","January","January","January","January","January","January","January","January","January","*",
             "Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","*","*",
             "January","January","January","January","January","January","January","January","January","January","January","January","*",
             "Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","Februari","*","*"
             ]
        ];
        
        this.hHeadings = [
            ["Amsterdam","Amsterdam","Amsterdam","Amsterdam",
            "San Francisco","San Francisco","San Francisco","San Francisco","San Francisco",
            "Atlanta","Atlanta"],
            ["Shop 1","Shop 2","Shop 3","Shop 4",
            "Shop 5","Shop 6","Shop 7","Shop 8","Shop 9",
            "Shop 3", "Shop 3"],
        ];
        
        callback();
    },
    
    /**
     * 
     */
    getDataRange : function(rows, columns, callback){
        var view = this.view.slice(rows.start, rows.start + rows.length);
        for (var i = 0; i < view.length; i++) {
            view[i] = view[i].slice(columns.start, columns.start + columns.length);
        }
        
        callback(null, view, false);
        
        return view; //Return cached results
    },
    
    isEditable : function(){
        return true;
    },
    
    getHeadingRangeMeta : function(name, vertical, index, callback){
        var read = (vertical
            ? this.vHeadings
            : this.hHeadings)[index];
        
        var start, length;
        for (var i = 0; i < read.length; i++) {
            if (start !== undefined) {
                if (read[i] == name)
                    length = i - start;
                else
                    break;
            }
            else if (read[i] == name) 
                start = i;
        }
        
        callback(null, {
            start  : start,
            length : i - start + 1
        });
    },
    
    getHeadingRange : function(start, length, vertical, callback){
        var read = vertical
            ? this.vHeadings
            : this.hHeadings
        var obj = [];
        
        for (var i = 0; i < read.length; i++) {
            obj[i] = read[i].slice(start, start + length);
            obj[i].first = true;
        }
            
        return callback(null, obj);
        
        if (vertical) {
            
        }
        else {
            
        }
    }
};

module.exports = DataProvider;

});