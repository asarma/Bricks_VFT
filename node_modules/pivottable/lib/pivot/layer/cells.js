define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var dom = require("../lib/dom");
var lang = require("../lib/lang");
var useragent = require("../lib/useragent");
var EventEmitter = require("../lib/event_emitter").EventEmitter;

var Cells = function(parentEl) {
    this.element = dom.createElement("div");
    this.element.className = "pivot_layer pivot_cell-layer";
    parentEl.appendChild(this.element);
};

(function() {
    this.defaultAlignment = ["align-left", "valign-top"]

    oop.implement(this, EventEmitter);

    this.setDataProvider = function(provider) {
        this.provider = provider;
    };
    
    this.setDefaultAlignment = function(type, vtype){
        type  = type ? "align-" + type : this.defaultAlignment[0];
        vtype = vtype ? "valign-" + vtype : this.defaultAlignment[1];
        this.defaultAlignment = [type, vtype];
    }
    
    this.update = function(config) {
        this.config = config;
        
        var totals = this.provider.highlightTotals;

        var col, row, html = [], view = config.view, datarow;
        var hRange = config.hRange, vRange = config.vRange;
        var rowCount = config.lastRow + 1 - config.firstRow;
        var colCount = config.lastCol + 1 - config.firstCol;
        var hsize, vsize, hItem, vItem;
        var align = this.defaultAlignment[0];
        var valign = this.defaultAlignment[1];
        
        var vTotals = config.vTotals, hTotals = config.hTotals;
        
        for (row = 0; row < rowCount; row++) {
            vsize = (vItem = vRange[row]).size;
            if (hsize === 0) 
                continue;
            html.push("<div>");
            datarow = view[row];
            for (col = 0; col < colCount; col++) {
                hsize = (hItem = hRange[col]).size;
                if (vsize === 0) 
                    continue;
                html.push("<span style='width: " + hsize + "px;height: " 
                    + vsize + "px' class='" 
                    + (totals && (hTotals[col] || vTotals[row]) ? "total " : '') 
                    + (hItem.align || vItem.align || align) + " "
                    + (hItem.valign || vItem.valign || valign) + " "
                    + "'>"
                    + (datarow && datarow[col] || "&nbsp;") 
                    + "</span>"
                );
            }
            html.push("</div>");
        }
        
        this.element = dom.setInnerHtml(this.element, html.join(""));
    };

    this.scroll = function(config) {
        return this.update(config);
        
        var oldConfig = this.config;
        this.config = config;
        
        if (oldConfig.firstRow == config.firstRow
          && oldConfig.firstCol == config.firstCol)
            return;
        
        // @todo partial horizontal updating
        var datarow, el = this.element, view = config.view, length;
        if (oldConfig) {
            var diff      = config.firstRow - oldConfig.firstRow;
            var threshold = Math.ceil(config.lastRow - config.firstRow * 2 / 3);
            var i, j, row, html = [];
            
            if (diff < 0) {
                if (diff > -1 * threshold) {
                    for (row, i = -1; i > diff - 1; i--) {
                        row     = el.lastChild; 
                        length  = config.lastCol - config.firstCol;
                        datarow = view[oldConfig.firstRow + i];
                        
                        el.insertBefore(row, el.firstChild);
                        
                        for (j = 0; j < length; j++) {
                            html.push("<span>" + (datarow && datarow[j] || "&nbsp;") + "</span>");
                        }
                        
                        dom.setInnerHtml(row, html.join(""));
                    }
                    return;
                }
            }
            else if (diff < threshold) {
                for (row, i = 0; i < diff; i++) {
                    row     = el.firstChild;
                    length  = config.lastCol - config.firstCol;
                    datarow = view[length - diff + i];
                    
                    el.appendChild(row);
                    
                    for (j = 0; j < length; j++) {
                        html.push("<span>" + (datarow && datarow[j] || "&nbsp;") + "</span>");
                    }
                    
                    dom.setInnerHtml(row, html.join(""));
                }
                return;
            }
        }
        
        this.update();
    };
    
    this.updateRows = function(config, firstRow, lastRow) {
        this.config = config;

        var col, row, html = [], view = config.view, datarow;
        var firstCol = config.firstCol, lastCol = config.lastCol;
        var i = config.firstRow - firstRow;
        var l = lastRow - config.firstRow;

        var el = this.element;
        for (i = 0; i < l; i++) {
            row = el.childNodes[i];
            
            datarow = view[i];
            html    = [];
            for (col = firstCol; col <= lastCol; col++) {
                html.push("<span>" + (datarow && datarow[col - firstCol] || "&nbsp;") + "</span>");
            }
            
            dom.setInnerHtml(row, html.join(""));
        }
    };

    this.destroy = function() {
        
    };

}).call(Cells.prototype);

exports.Cells = Cells;

});
