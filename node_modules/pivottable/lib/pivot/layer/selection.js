/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2010, Ajax.org B.V.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

define(function(require, exports, module) {
"use strict";

var dom = require("../lib/dom");

var Selection = function(parentEl, renderer) {
    this.element = dom.createElement("div");
    this.element.className = "pivot_layer pivot_selection-layer";
    parentEl.appendChild(this.element);
    
    document.addEventListener("mousedown", function(e){
        var div = renderer.divEditor;
        if (!div || !renderer.editing || e.target == div)
            return;
            
        renderer.editing = false;
        renderer.$renderChanges(renderer.CHANGE_SELECTION);
        div.done();
    }, true);
    
    this.renderer = renderer;
};

(function() {

    this.setDataProvider = function(provider) {
        this.provider = provider;
    };

    this.renderSelection = function(config, range, html){
        var rows = config.vRange;
        var cols = config.hRange;
        
        var s = range.start;
        var e = range.end;
        
        var startRow = Math.min(s.row, e.row) - config.firstRow;
        var lengthRow = Math.min(config.lastRow, Math.max(s.row, e.row)) - config.firstRow + 1;
        var startCol = Math.min(s.column, e.column) - config.firstCol;
        var lengthCol = Math.min(config.lastCol, Math.max(s.column, e.column)) - config.firstCol + 1;
        
        if ((lengthRow - startRow) < 2 && (lengthCol - startCol) < 2 ||
          (lengthRow - startRow) < 1 || (lengthCol - startCol) < 1)
            return;
        
        var top, left, width, height, i;
        
        top = 0, height = 1;
        for (i = 0; i < startRow; i++) top += rows[i].size;
        for (i = Math.max(0, startRow); i < lengthRow; i++) height += rows[i].size;
        
        left = 0, width = 1;
        for (i = 0; i < startCol; i++) left += cols[i].size;
        for (i = Math.max(0, startCol); i < lengthCol; i++) width += cols[i].size;
        
        html.push("<div class='pivot_selection_range' style='left:"
            + left + "px;top:" + top + "px;width:" + width + "px;height:" 
            + height + "px;'></div>");
    }
    
    this.renderCaret = function(config, caret, html){
        var rows = config.vRange;
        var cols = config.hRange;
        
        var startRow = caret.row - config.firstRow;
        var startCol = caret.column - config.firstCol;
        
        if (startRow < 0 || startCol < 0 || 
          caret.row > config.lastRow || caret.column > config.lastCol)
            return;
        
        var top, left, width, height, i;
        
        top = 0;
        for (i = 0; i < startRow; i++) top += rows[i].size;
        height = rows[startRow].size + 3;
        
        left = 0;
        for (i = 0; i < startCol; i++) left += cols[i].size;
        width = cols[startCol].size + 3;
        
        html.push("<div class='pivot_caret' style='left:"
            + left + "px;top:" + top + "px;width:" + width + "px;height:" 
            + height + "px;'><span></span></div>");
    }
    
    this.renderEditor = function(config, caret){
        var renderer = this.renderer;
        
        if (!renderer.editing) {
            if (renderer.divEditor)
                renderer.divEditor.style.display = "none";
            delete renderer.editValue;
            return;
        }
        
        var cursor   = document.querySelector(".pivot_caret");
        if (!cursor) {
            if (renderer.divEditor)
                renderer.divEditor.style.display = "none";
            return;
        }
        
        var div, parent;
        if (!renderer.divEditor) {
            parent = this.element.parentNode.parentNode;
            div    = parent.appendChild(document.createElement("div"));
            
            renderer.divEditor = div;
            div.className = "pivot_editable_cell";
            div.contentEditable = true;
            div.addEventListener("mousedown", function(e){
                e.stopPropagation();
            });
            div.addEventListener("keydown", function(e){
                if (e.keyCode == 27) {
                    renderer.editing = false;
                    renderer.$renderChanges(renderer.CHANGE_SELECTION);
                }
                else if (e.keyCode == 13) {
                    e.preventDefault();
                    div.innerText = div.innerText.replace(/\n/g, "");
                    div.done();
                }
            });
            div.addEventListener("keyup", function(e){
                renderer.editValue = div.innerText;
            });
        }
        else {
            div = renderer.divEditor;
            div.style.display = "block";
        }
            
        div.done = function(){
            renderer._emit("edit", {
                cell  : caret,
                value : div.innerText.charCodeAt() === 160 ? "" : div.innerText
            });
            renderer.editing = false;
            renderer.$renderChanges(renderer.CHANGE_SELECTION);
        }
        
        var pos     = cursor.getBoundingClientRect();
        var ppos    = div.parentNode.getBoundingClientRect();
        var caption = this.renderer.editValue 
            || config.view[caret.row - config.firstRow][caret.column - config.firstCol] 
            || "&nbsp;";
        
        div.style.left   = (pos.left - ppos.left + 3) + "px";
        div.style.top    = (pos.top - ppos.top + 3) + "px";
        div.style.width  = (pos.width - 6) + "px";
        div.style.height = (pos.height - 6) + "px";
        div.innerHTML    = caption;
        
        div.focus();
    }

    this.update = function(config) {
        this.config = config;

        var selections = [this.provider.selection.getRange()];
        var caret      = this.provider.selection.getCaret();
        
        var html = [];
        for (var i = 0, l = selections.length; i < l; i++) {
            this.renderSelection(config, selections[i], html);
        }
        this.renderCaret(config, caret, html);
        
        this.element = dom.setInnerHtml(this.element, html.join(""));
        
        this.renderEditor(config, caret);
    };

    this.destroy = function() {
        clearInterval(this.intervalId);
        clearTimeout(this.timeoutId);
    };

}).call(Selection.prototype);

exports.Selection = Selection;

});
