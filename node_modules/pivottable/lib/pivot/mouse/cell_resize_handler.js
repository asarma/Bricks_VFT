define(function(require, exports, module) {
"use strict";
var dom = require("../lib/dom");
var event = require("../lib/event");

function HorizontalHandler(mouseHandler) {
    var editor   = mouseHandler.editor;
    var layer    = editor.renderer.$horHeadingLayer;
    var htmlNode = editor.renderer.scroller;
    
    var THRESHOLD = 3;
    var dragNode, dragDiff, dragX, dragSize, dragging;
    
    function setDragInfo(e){
        var config = editor.renderer.layerConfig;
        var range  = config.hRange;
        var rect   = htmlNode.getBoundingClientRect();
        
        var rY = e.y - rect.top;
        var rX = e.x - rect.left;
        
        
        // Lets find offset to clicked cell
        var total = 0, i = 0;
        while (total < rX) {
            if (!range[i]) return false;
            total += range[i++].size;
        }
        if (!range[i-1])
            return;
        var size = range[i-1].size;
        var diff = rX - total + size;
        
        // Size left border
        if (diff < THRESHOLD) {
            dragNode = range[i - 2];
            if (!dragNode) return; //Cannot size first heading
            
        }
        // Size right border
        else if (size - diff < THRESHOLD) {
            diff = diff - size;
            dragNode = range[i - 1];
        }
        // No sizing
        else return false;
        
        dragDiff = diff;
        dragX    = e.x;
        dragSize = size;
        
        return true;        
    }
    
    function getHeadingCell(e){
        var config = editor.renderer.layerConfig;
        var range  = config.hRange;
        var rect   = htmlNode.getBoundingClientRect();
        
        var rY = e.y - rect.top;
        var rX = e.x - rect.left;
        
        var index = Math.floor((rect.height - rY) / layer.height);
        
        var total = 0, i = 0, offset = 0, size, buffer = 0;
        while (total < rX) {
            if (!range[i]) return false;
            
            size = range[i++].size;
            total += size;
            
            if (!buffer && !size) offset++;
            else if (offset && ++buffer == 2) offset = 0;
        }
        // var size = range[i-1].size;
        // var diff = rX - total + size;
        
        return {
            index : index,
            start : config.hRange.index + i - 1
        };
    }
    
    mouseHandler.editor.on("mousedown", function(e) {
        if (setDragInfo(e)) {
            mouseHandler.setState("resizeCellsHorizontal");
            mouseHandler.captureMouse(e);
            dragging = true;
            htmlNode.style.cursor = "ew-resize";
            
            e.preventDefault();
        }
    });

    mouseHandler.editor.on("mousemove", function(e) {
        if (!dragging) {
            htmlNode.style.cursor = setDragInfo(e)
                ? "ew-resize"
                : "";
            return;
        }
        
        mouseHandler.resizeCellsHorizontal(e);
    });
    
    mouseHandler.resizeCellsHorizontal = function(e){
        dragNode.size = Math.max(layer.minSize, dragSize + ((e || this).x - dragX));
        layer.updateNodes([dragNode]);
        editor.renderer.updateHorizontalHeadings();
        editor.renderer.updateCells();
        editor.renderer.updateCaret();
    };

    event.addListener(htmlNode, "mouseup", function(e) {
        if (!dragging) return;
        
        mouseHandler.resizeCellsHorizontalEnd();
    });
    
    mouseHandler.resizeCellsHorizontalEnd = function(){
        dragging = false;
        htmlNode.style.cursor = "";
    };
    
    event.addListener(htmlNode, "mouseout", function(e) {
    });

}

exports.HorizontalHandler = HorizontalHandler;

});
