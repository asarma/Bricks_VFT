<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title><%=name%> - Cloud9 IDE</title>
    <link rel="stylesheet" type="text/css" href="<%=staticPrefix%>/plugins/c9.ide.layout.classic/loading.css" />
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" /> 
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
</head>
<body>
    <div id="loadingide">
        <div id="header"></div>
        <div id="content" class="loading-progress">
            <div id="progress-msg">
                Preparing your workspace <span id="dots"></span>
            </div>
            <div class="loading-seperator"></div>
            <div class="loading-msg">It will be just as you left it</div>
            
            <div class="ui-progress-bar ui-container" id="progress_bar">
                <div class="ui-progress" style="width: 7%;">
                  <span class="ui-label" style="display:none;"></span>
                </div>
              </div>
            
        </div>
        <div class="footer">
            <a href="https://docs.c9.io">Documentation</a> | 
            <a href="http://status.c9.io">Server Status</a> | 
            <a href="http://support.c9.io">Support</a>
        </div>
    </div>
    
    <script src="<%=staticPrefix%>/plugins/c9.login.client/bootstrap.js"></script>
    <script>
        var plugins = <%- JSON.stringify(architectConfig) %>;
    
        <% if (packed) { %>
        var background = "<%=staticPrefix%>/../config/<%=configName%>.js";
        var preload = null;
        <% } else { %>
        var background = null;
        var preload = auth.serial([
            "<%=staticPrefix%>/require.js",
            "/config/require_config.js"
        ]);
        <% } %>
        
        var a = auth({
            clientId: "<%=appId%>",
            authorizationUrl: "<%=ideBaseUrl%>/api/nc/auth",
            loginHint: location.pathname.split("/")[1],
            background: background,
            preload: preload,
            authorized: auth.parallel([
                "<%=ideBaseUrl%>/api/project/sync/<%=pid%>"
            ]),
            onLoad: main
        });
        
        var login = a.login;
        delete window.auth;
        
        function main(err, token) {
            // TODO show message
            if (err) {
                console.error(err);
                alert(err.error);
                return;
            }
            
            plugins.push({
                consumes: [],
                provides: ["auth.bootstrap"],
                setup: function(options, imports, register) {
                    register(null, {
                        "auth.bootstrap": {
                            login: login
                        }
                    });
                }
            });
            
            require(["lib/architect/architect"], function (architect) {
                architect.resolveConfig(plugins, function (err, config) {
                    if (err) throw err;
                    
                    plugins.forEach(function(plugin) {
                        if ("accessToken" in plugin)
                            plugin.accessToken = token;
                    });
                    
                    var app = architect.createApp(config, function(err) {
                        if (err) throw err;
                        console.log("Architect app started");
                        
                        window.vfs = app.getService("vfs").vfs;
                    });
                    app.on("error", function(err){
                        throw err;
                        debugger;
                    });
                    app.on("service", function(name, plugin) {
                        if (!plugin.name)
                            plugin.name = name;
                            
                        console.log("Service loaded " + name);
                    });
                    app.on("ready", function() {
                        if (app.services.c9.debug)
                            window.app = app.services;
                            
                        var loader = document.getElementById("loadingide");
                        loader.parentNode.removeChild(loader);
                    });
                });
            });
        }
        
    </script>
</body>
</html>